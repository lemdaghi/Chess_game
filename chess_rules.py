import pygame

class ChessRules:
    @staticmethod
    def is_in_check(board, color):
        """Retourne True si le Roi de 'color' est en √©chec."""
        king = None

        # Trouver le Roi
        for row in board.grid:
            for piece in row:
                if piece and piece.__class__.__name__ == "King" and piece.color == color:
                    king = piece
                    break

        if not king:
            print("üö® ERREUR: Le Roi n'a pas √©t√© trouv√© sur l'√©chiquier !")
            return False  # √âvite le crash

        # V√©rifier si une pi√®ce adverse attaque le Roi
        for row in board.grid:
            for piece in row:
                if piece and piece.color != color:
                    moves = piece.get_moves(board)  # ‚úÖ Appelle uniquement Board, pas Game
                    if king.position in moves:
                        return True  # Le Roi est attaqu√©

        return False  # Le Roi est en s√©curit√©

    @staticmethod
    def is_checkmate(board, color):
        """Retourne True si le joueur 'color' est √©chec et mat."""
        if not ChessRules.is_in_check(board, color):
            return False  # Pas en √©chec, pas de mat

        king = None
        attackers = []

        # Trouver le Roi et les attaquants
        for row in board.grid:
            for piece in row:
                if piece and piece.__class__.__name__ == "King" and piece.color == color:
                    king = piece
                elif piece and piece.color != color:
                    moves = piece.get_moves(board)
                    if king and king.position in moves:
                        attackers.append(piece)

        if not king:
            print("üö® ERREUR: Le Roi n'a pas √©t√© trouv√© sur l'√©chiquier !")
            return False

        if not attackers:
            print("üö® ERREUR: Aucun attaquant trouv√© alors que le Roi est en √©chec !")
            return False

        # 1Ô∏è‚É£ Le Roi peut-il s'√©chapper ?
        for move in king.get_moves(board):
            temp_piece = board.get_piece(move)  # Sauvegarde
            board.move_piece(king, move)  # Teste le mouvement
            if not ChessRules.is_in_check(board, color):  # V√©rifie si le Roi est en s√©curit√©
                board.move_piece(king, king.position)  # Restaure la position du Roi
                board.grid[move[1]][move[0]] = temp_piece  # Restaure la pi√®ce mang√©e
                return False  # Pas √©chec et mat
            board.move_piece(king, king.position)
            board.grid[move[1]][move[0]] = temp_piece

        return True  # Si aucun mouvement ne sort le Roi de l'√©chec ‚Üí √©chec et mat
