class ChessRules:

    @staticmethod
    def is_in_check(board, color, position=None, ignore_castling=False):
        """Retourne True si le Roi de 'color' est en √©chec, sauf si on ignore la v√©rification pour le Roque."""
        king_pos = None
        
        if position:
            king_pos = position
        else:
            for row in board.grid:
                for piece in row:
                    if piece and piece.__class__.__name__ == "King" and piece.color == color:
                        king_pos = piece.position
                        break

        if not king_pos:
            print('No King')
            return False
          
        x, y = king_pos

        # ‚úÖ Simulation temporaire en enlevant la pi√®ce √† cet endroit
        temp_piece = board.get_piece(king_pos)
        board.grid[y][x] = None 
        
        # V√©rifier toutes les pi√®ces adverses
        in_check = False
        for row in board.grid:
            for piece in row:
                if piece and piece.color != color and piece.__class__.__name__ != "King":
                    # ‚úÖ V√©rification sp√©ciale pour les Pions
                    if piece.__class__.__name__ == "Pawn":
                        direction = -1 if piece.color == "white" else 1  # Blancs montent, Noirs descendent
                        for dx in [-1, 1]:  # Attaque en diagonale
                            px, py = piece.position
                            if (px + dx, py + direction) == (x, y):  # Le Roi est sur une case attaqu√©e
                                in_check = True
                                break
                    elif king_pos in piece.get_moves(board, simulate=True):
                        in_check = True
                        break  
                    
        # ‚úÖ Restauration de la pi√®ce d'origine
        board.grid[y][x] = temp_piece
        return in_check  

    @staticmethod
    def is_checkmate(board, color):
        """Retourne True si le joueur 'color' est √©chec et mat."""
        if not ChessRules.is_in_check(board, color):
            return False  # Pas en √©chec, donc pas de mat.

        king = None
        for row in board.grid:
            for piece in row:
                if piece and piece.__class__.__name__ == "King" and piece.color == color:
                    king = piece

        if king is None:
            print("üö® ERREUR: Impossible de trouver le Roi !")
            return False  

        print(f"‚ö†Ô∏è {color} King est en √©chec")
        # 1Ô∏è‚É£ V√©rifier si le Roi peut s‚Äô√©chapper
        original_position = king.position  # ‚úÖ Sauvegarde la position initiale du Roi
        for move in king.get_moves(board):  # ‚úÖ Teste chaque d√©placement possible

            target_piece = board.get_piece(move)  # ‚úÖ On sauvegarde ce qu'il y a √† la destination
            board.grid[original_position[1]][original_position[0]] = None  # ‚úÖ On enl√®ve le Roi temporairement
            board.grid[move[1]][move[0]] = king  # ‚úÖ On place le Roi √† la nouvelle position
            king.position = move  # ‚úÖ On met √† jour la position du Roi

            print(f"Testing move: King moves to {move}")

            if not ChessRules.is_in_check(board, color):  
                print(f"King escapes check by moving to {move}")
                # ‚úÖ Si le Roi peut se d√©placer sans √™tre en √©chec, on restaure l'√©tat et on retourne False
                board.grid[move[1]][move[0]] = target_piece  # ‚úÖ On remet la pi√®ce captur√©e si besoin
                board.grid[original_position[1]][original_position[0]] = king  # ‚úÖ On remet le Roi √† sa position
                king.position = original_position  # ‚úÖ On r√©tablit la vraie position du Roi
                return False  # ‚úÖ Ce n'est PAS un √©chec et mat

            # ‚úÖ Restauration de l‚Äô√©tat initial apr√®s chaque test
            board.grid[move[1]][move[0]] = target_piece  # ‚úÖ On remet la pi√®ce mang√©e (si existante)
            board.grid[original_position[1]][original_position[0]] = king  # ‚úÖ On remet le Roi √† sa position
            king.position = original_position  # ‚úÖ On restaure la vraie position du Roi

        print(f"{color.capitalize()} King is checked and has no escape!")

        # 2Ô∏è‚É£ V√©rifier si une autre pi√®ce peut intercepter l‚Äôattaque ou capturer l‚Äôattaquant
        attackers = []
        for row in board.grid:
            for piece in row:
                if piece and piece.color != color:
                    if king.position in piece.get_moves(board, simulate=True):  
                        attackers.append(piece)

        if len(attackers) > 1:
            return True  # ‚úÖ Si plusieurs attaquants menacent le Roi, il n'y a aucun moyen de se d√©fendre ‚Üí √âCHEC ET MAT.

        attacker = attackers[0]  # ‚úÖ S'il n'y a qu'un seul attaquant, on teste si on peut le capturer ou le bloquer

        # 3Ô∏è‚É£ V√©rifier si une pi√®ce alli√©e peut capturer l‚Äôattaquant
        for row in board.grid:
            for piece in row:
                if piece and piece.color == color:
                    if attacker.position in piece.get_moves(board, simulate=True):  
                        return False  # ‚úÖ Si une pi√®ce peut capturer l'attaquant, ce n'est PAS un mat

        # 4Ô∏è‚É£ V√©rifier si on peut interposer une pi√®ce entre l'attaquant et le Roi
        if attacker.__class__.__name__ != "Knight":  # ‚úÖ Les Cavaliers ne peuvent pas √™tre bloqu√©s
            print(f"attacker is {attacker.__class__.__name__}")
            x1, y1 = king.position
            x2, y2 = attacker.position
            path = []  

            dx = (x2 - x1) // max(1, abs(x2 - x1))  
            dy = (y2 - y1) // max(1, abs(y2 - y1))  

            nx, ny = x1 + dx, y1 + dy
            while (nx, ny) != (x2, y2):
                path.append((nx, ny))
                nx += dx
                ny += dy

            for row in board.grid:
                for piece in row:
                    if piece and piece.color == color:
                        for move in piece.get_moves(board, simulate=True):  
                            if move in path:
                                return False  # ‚úÖ Une pi√®ce peut bloquer l'attaque

        return True  # ‚úÖ Si rien ne peut sauver le Roi, alors √âCHEC ET MAT.

    @staticmethod
    def is_stalemate(board, color):
        """V√©rifie si le joueur `color` est en situation de PAT."""
        if ChessRules.is_in_check(board, color):
            return False  # ‚úÖ S'il est en √©chec, ce n'est pas un PAT

        # üîé Parcourir toutes les pi√®ces du joueur
        for row in board.grid:
            for piece in row:
                if piece and piece.color == color:
                    valid_moves = piece.get_moves(board)  # R√©cup√©rer les mouvements l√©gaux
                    
                    for move in valid_moves[:]:  # ‚úÖ On utilise une copie pour √©viter les modifications directes
                        if board.check_legal_move(piece, move):  
                            return False  # ‚úÖ Il y a encore au moins un coup l√©gal ‚Üí Pas de PAT
                    
        print("‚öñÔ∏è Match nul par PAT ! Aucun coup l√©gal possible.")
        return True  # ‚úÖ Aucun coup l√©gal ‚Üí C'est un PAT !